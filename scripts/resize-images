#!/usr/bin/env node

const sharp = require('sharp')
const fs = require('fs')
const path = require('path')

const SIZES = [450, 1024, 1440, 2560]
const FORMATS = ['jpeg', 'webp']
const DENSITIES = [
  {
    density: 1,
    quality: 80
  },
  {
    density: 2,
    quality: 50
  },
  {
    density: 3,
    quality: 30
  },
]

function processImage(imagePath) {
  const sharper = sharp(imagePath)

  const promises = []

  SIZES.forEach((size) => {
    FORMATS.forEach(format => {
      DENSITIES.forEach(({ density, quality}) => {
        const ext = path.extname(imagePath)
        const filename = path.basename(imagePath, ext)
        const dir = path.dirname(imagePath)

        const fileName = path.join(dir, `${filename}-${size}-${density}x.${format}`)
        promises.push(
          sharper.clone().resize({ width: size * density })[format]({quality: quality}).toFile(fileName))
      })
    })
  })

  return Promise.all(promises)
}

async function main() {
  const dir = process.env.IMAGE_DIR
  const files = await fs.promises.readdir(dir);
  const imageFiles = files.filter(
    (fileName) => ['jpg', 'jpeg', 'png']
      .includes(path.extname(fileName).slice(1)))

  imageFiles.forEach(fileName => {
    const imagePath = path.join(path.resolve(dir), fileName)
    processImage(imagePath)
  })
}

main().catch(console.error)
